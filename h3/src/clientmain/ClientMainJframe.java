/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clientmain;

import bank.Bank;
import bank.BankAccount;
import bank.RejectedException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.UUID;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import server.ClientAccount;
import server.Item;
import server.MarketService;
import server.MarketServiceImpl;
import server.WishItem;


/**
 *
 * @author danpan
 */
public class ClientMainJframe extends javax.swing.JFrame {

    private BankAccount bankAccount;
    private Bank bankObj;
    private MarketService market;
    private ClientAccount client;
    //DefaultListModel wishItemModel=new DefaultListModel();
    //DefaultListModel listModel = new DefaultListModel();
    private ClientInterface clientInterfaceObj = null;
    DefaultListModel itemModel = new DefaultListModel();
    DefaultListModel itemModel1 = new DefaultListModel();
    /**
     * Creates new form ClientMainJframe
     */
    public ClientMainJframe() {

        initComponents();

        // createBankAccountButton.setEnabled(false);
        
        //depositButton.setEnabled(false);
        //registerMarketButton.setEnabled(false);
        sellButton.setEnabled(false);
        wishButton.setEnabled(false);
        getAllItemButton.setEnabled(false);
        buyButton.setEnabled(false);
        //unregisterMarketButton.setEnabled(false);
        this.getClientWishButton.setEnabled(false);
        this.removeWishButton.setEnabled(false);
        this.logOutButton.setEnabled(false);
        this.getRecordButton.setEnabled(false);
        
       //this.wishList.setModel(listModel);
        try {
            clientInterfaceObj = new ClientImpl(this);

            try {
                LocateRegistry.getRegistry(1099).list();
            } catch (RemoteException e) {
                LocateRegistry.createRegistry(1099);
            }
            bankObj = (Bank) Naming.lookup("ICABANK");
            market = (MarketService) Naming.lookup("BlocketServer");
        } catch (Exception e) {
            System.out.println("The runtime failed: " + e.getMessage());
            System.exit(0);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        accountNameTextField = new javax.swing.JTextField();
        depositTextField = new javax.swing.JTextField();
        depositButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bankText = new javax.swing.JTextArea();
        userNameTextField = new javax.swing.JTextField();
        wishButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        itemNameTextField = new javax.swing.JTextField();
        itemPriceTextField = new javax.swing.JTextField();
        getAllItemButton = new javax.swing.JButton();
        buyButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemsList = new javax.swing.JList();
        sellButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        wishList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        marketText = new javax.swing.JTextArea();
        registerMarketButton = new javax.swing.JButton();
        createBankAccountButton = new javax.swing.JButton();
        unregisterMarketButton = new javax.swing.JButton();
        getClientWishButton = new javax.swing.JButton();
        removeWishButton = new javax.swing.JButton();
        getBankAccountButton = new javax.swing.JButton();
        PasswordField = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        getRecordButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("AccountName:");

        jLabel2.setText("DepositMoney:");

        depositButton.setText("depositMoney");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });

        bankText.setColumns(20);
        bankText.setRows(5);
        jScrollPane1.setViewportView(bankText);

        wishButton.setText("wishItem");
        wishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wishButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("UserName:");

        jLabel4.setText("ItemName:");

        jLabel5.setText("ItemPrice:");

        getAllItemButton.setText("All Item to sell:");
        getAllItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllItemButtonActionPerformed(evt);
            }
        });

        buyButton.setText("BuyItem");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(itemsList);

        sellButton.setText("SellItem");
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(wishList);

        marketText.setColumns(20);
        marketText.setRows(5);
        jScrollPane4.setViewportView(marketText);

        registerMarketButton.setText("register in Market");
        registerMarketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerMarketButtonActionPerformed(evt);
            }
        });

        createBankAccountButton.setText("createBankAccount");
        createBankAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBankAccountButtonActionPerformed(evt);
            }
        });

        unregisterMarketButton.setText("unregister from Market");
        unregisterMarketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unregisterMarketButtonActionPerformed(evt);
            }
        });

        getClientWishButton.setText("My wish list:");
        getClientWishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getClientWishButtonActionPerformed(evt);
            }
        });

        removeWishButton.setText("RemoveWish");
        removeWishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeWishButtonActionPerformed(evt);
            }
        });

        getBankAccountButton.setText("getBankAccount");
        getBankAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getBankAccountButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Password:");

        loginButton.setText("login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        logOutButton.setText("logout");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        getRecordButton.setText("getRecord");
        getRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getRecordButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(25, 25, 25)
                        .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registerMarketButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loginButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(28, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(itemPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sellButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wishButton)
                            .addComponent(unregisterMarketButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(accountNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(depositTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(depositButton)
                            .addComponent(createBankAccountButton)
                            .addComponent(getBankAccountButton)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buyButton))
                                .addComponent(getAllItemButton))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(getClientWishButton)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(removeWishButton)
                                        .addComponent(getRecordButton)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(accountNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(createBankAccountButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(getBankAccountButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(depositTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(depositButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(registerMarketButton)
                    .addComponent(loginButton)
                    .addComponent(logOutButton))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(itemPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unregisterMarketButton)))
                .addGap(1, 1, 1)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(getClientWishButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buyButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(getAllItemButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(getRecordButton)
                        .addGap(46, 46, 46)
                        .addComponent(removeWishButton)))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createBankAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBankAccountButtonActionPerformed
        
        if(this.accountNameTextField.getText().length()==0){
            JOptionPane.showMessageDialog(this, "input is invalid", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {

            this.bankAccount = bankObj.createAccount(accountNameTextField.getText());
            

        } catch (RemoteException | RejectedException ex) {
            JOptionPane.showMessageDialog(this, "this bank account is not created successfully", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(bankAccount!=null){
            this.getBankAccountButton.setEnabled(false);
            this.bankText.append("your bank account is successfully created!"+"\n");
            
        }else{
        
        JOptionPane.showMessageDialog(this, "this bank account is not created successfully", "Error", JOptionPane.ERROR_MESSAGE);
      
        }

    }//GEN-LAST:event_createBankAccountButtonActionPerformed

    private void registerMarketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerMarketButtonActionPerformed
        try {
            // TODO add your handling code here:
            char[] pass=this.PasswordField.getPassword();
            String passwordStr = new String(pass);
            if(this.userNameTextField.getText().length()==0)
            {
            JOptionPane.showMessageDialog(this, "Y our input name is not valid.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(passwordStr.length()<8){
                JOptionPane.showMessageDialog(this, "The length of password can not be less than 8.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(bankAccount==null){
                JOptionPane.showMessageDialog(this, "Bank account is needed to register.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            this.client = market.register(userNameTextField.getText(), this.PasswordField.getPassword(),this.bankAccount);
            if(client==null){
                JOptionPane.showMessageDialog(this, "you are already registered.", "Error", JOptionPane.ERROR_MESSAGE);
                return; 
            }
            this.marketText.append("you are registered successfully!"+"\n");
            //this.marketText.append(userNameTextField.getText() + " is successfully registered in the market" + "\n");
           // this.registerMarketButton.setEnabled(false);
            //this.userNameTextField.setEnabled(false);
            sellButton.setEnabled(true);
            wishButton.setEnabled(true);
            getAllItemButton.setEnabled(true);
            buyButton.setEnabled(true);
            unregisterMarketButton.setEnabled(true);
            this.getClientWishButton.setEnabled(true);
            this.removeWishButton.setEnabled(true);
            this.getRecordButton.setEnabled(true);
             this.userNameTextField.setEnabled(false);
            this.PasswordField.setEnabled(false);
            this.logOutButton.setEnabled(true);
            this.loginButton.setEnabled(false);
            this.registerMarketButton.setEnabled(false);

            //sent client interface reference to server
           this.market.addClientNotifyObject(clientInterfaceObj, client);
        } catch (RemoteException ex) {
            JOptionPane.showMessageDialog(this, "this bank account name has already been existed", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_registerMarketButtonActionPerformed

    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed

        try {
            bankAccount.deposit(Float.valueOf(depositTextField.getText()));
            bankText.append(bankAccount.getName()+":your account has $" + bankAccount.getBalance() + "\n");
            registerMarketButton.setEnabled(true);
            unregisterMarketButton.setEnabled(false);

        } catch (RemoteException | RejectedException ex) {
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_depositButtonActionPerformed

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        try {
            // TODO add your handling code here:\
            //this.market.addClientNotifyObject(clientInterfaceObj, client);
            market.sellItem(itemNameTextField.getText(), Float.valueOf(itemPriceTextField.getText()), client);
            this.marketText.append("your item " + itemNameTextField.getText() + " is in the market now" + "\n");
            
        } catch (RemoteException ex) {
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sellButtonActionPerformed

    private void wishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wishButtonActionPerformed
        try {
            // TODO add your handling code here:
             this.market.addClientNotifyObject(clientInterfaceObj, client);
            WishItem wishedItem=market.wishItem(itemNameTextField.getText(), Float.valueOf(itemPriceTextField.getText()), client);
            if (wishedItem==null){
                JOptionPane.showMessageDialog(this, "This item has been wished before,please wish another one", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            this.marketText.append("your wish item is " + itemNameTextField.getText() + " of $" + itemPriceTextField.getText() + "\n");
            
        } catch (RemoteException ex) {
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_wishButtonActionPerformed

    private void getAllItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAllItemButtonActionPerformed
        try {
            // TODO add your handling code here:
            itemModel.removeAllElements();
          /*  try {
            for (Item item : market.getAllItem()) {
            itemModel.addElement(item);
            }
            this.itemsList.setModel(itemModel);
            } catch (Exception e) {
            
            }*/
            
           HashMap<UUID,Item> itemTable= market.getAllItem();
            
            for(Item value:itemTable.values()){
            
                itemModel.addElement(value);
            }
            this.itemsList.setModel(itemModel);
        } catch (RemoteException ex) {
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
       
             
    }//GEN-LAST:event_getAllItemButtonActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        try {
            // TODO add your handling code here:
           
            Item item = (Item) itemsList.getSelectedValue();
           
          
            boolean isSuccessfull;

            isSuccessfull = market.buyItem(item, client);

            if (!isSuccessfull) {
                JOptionPane.showMessageDialog(this, "Purchasing failed!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            this.getAllItemButtonActionPerformed(evt);
            
            
           
        } catch (RemoteException ex) {
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buyButtonActionPerformed

    private void unregisterMarketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unregisterMarketButtonActionPerformed
        try {
        
            client=this.market.getMatchedClient(this.userNameTextField.getText(),this.PasswordField.getPassword());
        } catch (RemoteException ex) {
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        if(client!=null){
            try {
                this.market.unRegister(this.userNameTextField.getText(), this.PasswordField.getPassword());
                this.unregisterMarketButton.setEnabled(false);
                this.loginButton.setEnabled(true);
                this.registerMarketButton.setEnabled(true);
                this.logOutButton.setEnabled(false);
                this.sellButton.setEnabled(false);
        this.buyButton.setEnabled(false);
        this.getAllItemButton.setEnabled(false);
        this.getClientWishButton.setEnabled(false);
        this.removeWishButton.setEnabled(false);
        this.wishButton.setEnabled(false);
        this.getRecordButton.setEnabled(false);
        this.registerMarketButton.setEnabled(true);
        this.marketText.setText(null);
        this.userNameTextField.setText(null);
        this.PasswordField.setText(null);
         this.userNameTextField.setEnabled(true);
            this.PasswordField.setEnabled(true);
            } catch (RemoteException ex) {
                Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
    }//GEN-LAST:event_unregisterMarketButtonActionPerformed

    private void getClientWishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getClientWishButtonActionPerformed
        itemModel1.removeAllElements();
        
        try {
            for (WishItem item : market.getWishedList(client)) {
                if(item.getWisher().equals(client.getUserName())){
                itemModel1.addElement(item);}
            }
            this.wishList.setModel(itemModel1);
        } catch (Exception e) {

        }
        
        
    }//GEN-LAST:event_getClientWishButtonActionPerformed

    private void removeWishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeWishButtonActionPerformed
        // TODO add your handling code here:
        WishItem itemWished= (WishItem)wishList.getSelectedValue();
        
       
        try {
            //boolean isRemove=this.market.updateWishItemList(itemWished);
            //System.out.println(isRemove);
            this.market.updateWishItemList(client,itemWished);
            this.getClientWishButtonActionPerformed(evt);
        } catch (RemoteException ex) {
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_removeWishButtonActionPerformed

    private void getBankAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getBankAccountButtonActionPerformed
        try {
            // TODO add your handling code here:;
            this.bankAccount=this.bankObj.getAccount(this.accountNameTextField.getText());
            this.depositButton.setEnabled(true);
        } catch (RemoteException ex) {
            
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        if(bankAccount==null){
             JOptionPane.showMessageDialog(this, "Account does not exist , please create a new one", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            String balance=null;
            try {
                balance = String.valueOf(bankAccount.getBalance());
            } catch (RemoteException ex) {
                Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.createBankAccountButton.setEnabled(false);
            this.bankText.append(accountNameTextField.getText()+" ,your account has "+balance+"\n");
        }
        
    }//GEN-LAST:event_getBankAccountButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        try {
            // TODO add your handling code here:
             
         this.client = market.login(userNameTextField.getText(), this.PasswordField.getPassword());
        } catch (RemoteException ex) {
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(client!=null){
            this.bankAccount=client.getBankAccount();
            String balance=null;
            try {
                balance = String.valueOf(bankAccount.getBalance());
            } catch (RemoteException ex) {
                Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.marketText.append(client.getUserName()+" is successfully login"+"\n");
            try {
                this.marketText.append(client.getUserName()+" ,your bankaccount:"+client.getBankAccount().getName()+  " has "+ balance+"\n");
            } catch (RemoteException ex) {
                Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                this.market.addClientNotifyObject(clientInterfaceObj, client);
            } catch (RemoteException ex) {
                Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
            }
            sellButton.setEnabled(true);
            wishButton.setEnabled(true);
            getAllItemButton.setEnabled(true);
            buyButton.setEnabled(true);
            unregisterMarketButton.setEnabled(true);
            this.getClientWishButton.setEnabled(true);
            this.removeWishButton.setEnabled(true);
            this.loginButton.setEnabled(false);
            this.logOutButton.setEnabled(true);
            this.getRecordButton.setEnabled(true);
            this.registerMarketButton.setEnabled(false);
            this.userNameTextField.setEnabled(false);
            this.PasswordField.setEnabled(false);
            
        }else{
        //this.marketText.append(userNameTextField.getText()+" unsuccessfully login!"+" Please check your username and password"+"\n");
             JOptionPane.showMessageDialog(this, "please check your username and password", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        try {
            // TODO add your handling code here:
            this.market.logout(client);
        } catch (RemoteException ex) {
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        this.itemModel.removeAllElements();
        this.itemModel1.removeAllElements();
        this.loginButton.setEnabled(true);
        this.logOutButton.setEnabled(false);
        this.sellButton.setEnabled(false);
        this.buyButton.setEnabled(false);
        this.getAllItemButton.setEnabled(false);
        this.getClientWishButton.setEnabled(false);
        this.removeWishButton.setEnabled(false);
        this.wishButton.setEnabled(false);
        this.getRecordButton.setEnabled(false);
        this.registerMarketButton.setEnabled(true);
        this.marketText.setText(null);
        this.userNameTextField.setText(null);
        this.PasswordField.setText(null);
        this.itemNameTextField.setText(null);
        this.itemPriceTextField.setText(null);
         this.userNameTextField.setEnabled(true);
            this.PasswordField.setEnabled(true);
            
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void getRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getRecordButtonActionPerformed
        try {
            // TODO add your handling code here:
            int boughtAmount=this.market.getBoughtAmount(this.client.getUserName());
            int selledAmount=this.market.getSelledAmount(this.client.getUserName());
            this.marketText.append(client.getUserName()+" selled "+selledAmount+" items!"+"\n");
            this.marketText.append(client.getUserName()+" bought "+boughtAmount+" items!"+"\n");
        } catch (RemoteException ex) {
            Logger.getLogger(ClientMainJframe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getRecordButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientMainJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientMainJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientMainJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientMainJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientMainJframe().setVisible(true);

            }
        });
    }

    public void addMessage(String message) {
        marketText.append(message + "\n");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JTextField accountNameTextField;
    private javax.swing.JTextArea bankText;
    private javax.swing.JButton buyButton;
    private javax.swing.JButton createBankAccountButton;
    private javax.swing.JButton depositButton;
    private javax.swing.JTextField depositTextField;
    private javax.swing.JButton getAllItemButton;
    private javax.swing.JButton getBankAccountButton;
    private javax.swing.JButton getClientWishButton;
    private javax.swing.JButton getRecordButton;
    private javax.swing.JTextField itemNameTextField;
    private javax.swing.JTextField itemPriceTextField;
    private javax.swing.JList itemsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton logOutButton;
    private javax.swing.JButton loginButton;
    private javax.swing.JTextArea marketText;
    private javax.swing.JButton registerMarketButton;
    private javax.swing.JButton removeWishButton;
    private javax.swing.JButton sellButton;
    private javax.swing.JButton unregisterMarketButton;
    private javax.swing.JTextField userNameTextField;
    private javax.swing.JButton wishButton;
    private javax.swing.JList wishList;
    // End of variables declaration//GEN-END:variables
}
